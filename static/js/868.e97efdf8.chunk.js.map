{"version":3,"file":"static/js/868.e97efdf8.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Contact/Contact.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactEditor/ContactEditor.styled.js","components/ContactEditor/ContactEditor.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = ({ contacts: {items} }) => items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n    }\n)","import styled from 'styled-components'\n\nexport const ContactWrap = styled.div`\n  display:flex;\n  flex-direction: row;\n  gap: 10px;\n`;\n\nexport const ButtonDel = styled.button`\n  font-size:14px;\n  border-radius: 5px;\n  border: 1px solid lightgrey;\n`;","import styled from 'styled-components'\n\nimport { Field, Form, ErrorMessage } from \"formik\";\n\nexport const PhonebookForm = styled(Form)`\n  display:flex;\n  flex-direction:column;\n  gap: 15px;\n  border: 1px solid black;\n  border-radius:5px;\n  padding: 10px;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\nexport const Input = styled(Field)`\n \n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\ncolor: red;\nfont-size:12px;  \n`;","import { Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport { Label, ErrorMsg, Input, PhonebookForm} from \"./ContactForm.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { addContact } from \"redux/contacts/operations\";\n\n\n\n\nexport const SignupSchema = Yup.object().shape({\n    name: Yup.string()\n    .test(\n      \"name\",\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n      value => /^[a-zA-Zа-яА-ЯіІїЇ ]+((['][a-zA-Zа-яА-ЯіІїЇ ])?[a-zA-Zа-яА-ЯіІїЇ]*)*$/.test(value)\n    )\n    .required('Required'),\n    number: Yup.string()\n    .test(\n      \"number\",\n      \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n      value =>/\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/.test(value)\n    )\n    .required('Required'),\n  });\n\nexport const ContactForm = ()=>{\n  const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    const handleSubmit = (contact, actions)=> {\n        const isExist = contacts.some(\n        item => item.name.toLowerCase() === contact.name.toLowerCase()\n            || item.number === contact.number\n        );\n    \n        if (isExist) {\n          alert(`${contact.name} or ${contact.number} is already in contacts.`);\n            return;\n        }\n        dispatch(addContact(contact));\n        actions.resetForm();\n  };\n\nreturn(\n<Formik\n    initialValues={\n      {\n          name: \"\",\n          number: \"\",\n      }}\n      \n    validationSchema={SignupSchema}\n    onSubmit={(contact, actions)=>handleSubmit(contact, actions)}\n    >\n\n  <PhonebookForm>\n    <Label>Name\n    <Input name=\"name\" type=\"text\"/>\n    <ErrorMsg name=\"name\" component=\"span\"/>\n    </Label>\n    \n    <Label>Number\n    <Input name=\"number\" type=\"tel\"/>\n    <ErrorMsg name=\"number\" component=\"span\"/>\n    </Label>\n\n   <button type=\"submit\">\n       Add contact\n     </button>\n  </PhonebookForm>\n  </Formik>\n)}\n","// import styled from 'styled-components';\nexport const customStyles = {\n        overlay: {\n              position: 'fixed',\n              top: '0',\n              left: '0',\n              width: '100vw',\n              height: '100vh',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: 'rgba(229, 227, 234, 0.8)',\n              zIndex: '1200',        \n},\n        content: {\n            top: '50%', \n            left: '50%', \n            right: 'auto',\n            bottom: 'auto',\n            transform: 'translate(-50%, -50%)', \n            padding: '0', \n            border: 'none', \n            maxWidth: 'calc(100vw - 48px)',\n            maxHeight: 'calc(100vh - 24px)',\n            overflow: 'hidden',\n        },\n};","import { useDispatch } from 'react-redux';\nimport { Formik } from \"formik\";\nimport Modal from \"react-modal\";\nimport { SignupSchema } from \"components/ContactForm/ContactForm\";\nimport { editContact } from 'redux/contacts/operations';\nimport { Label, ErrorMsg, Input, PhonebookForm} from \"components/ContactForm/ContactForm.styled\";\nimport { customStyles } from './ContactEditor.styled';\n\nexport const ContactEditor = ({ isOpen, contact, onClose }) => {\n  const dispatch = useDispatch();\n  \n  const handleEditSubmit = (contact,action)=>{\n    dispatch(editContact(contact));\n    onClose();\n  }\n\n \n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      style={customStyles}>\n    <div>\n        <h2>Edit Contact</h2>\n        <Formik\n              initialValues={\n                {\n                    id: contact.id,\n                    name: contact.name,\n                    number: contact.number,\n                }}\n                \n              validationSchema={SignupSchema}\n              onSubmit={(contact)=>handleEditSubmit(contact)}\n              >\n\n            <PhonebookForm>\n              <Label>Name\n              <Input name=\"name\" type=\"text\"/>\n              <ErrorMsg name=\"name\" component=\"span\"/>\n              </Label>\n              \n              <Label>Number\n              <Input name=\"number\" type=\"tel\"/>\n              <ErrorMsg name=\"number\" component=\"span\"/>\n              </Label>\n\n            <button type=\"submit\">\n                Edit contact\n              </button>\n              <button onClick={onClose}>Close</button>\n            </PhonebookForm>\n       </Formik>\n  </div>\n</Modal>\n\n  );\n};\n","import { deleteContact } from \"redux/contacts/operations\";\nimport { ContactWrap, ButtonDel } from \"./Contact.styled\";\nimport { useDispatch} from \"react-redux\";\nimport { ContactEditor } from \"components/ContactEditor/ContactEditor\";\nimport { useState } from \"react\";\n\nexport const Contact = ({contact })=>{\n\n  const dispatch = useDispatch();\n  const [isEdit, setIsEdit] = useState(false);\n\n  const handleEditClick = () => {\n    setIsEdit(true);\n  };\n\n  const handleEditClose = () => {\n    setIsEdit(false);\n  };\n  \n    const {id, name, number} = contact;\n    return(\n    <ContactWrap>\n        <p>{name}: {number}</p>\n        <ButtonDel onClick={()=> dispatch(deleteContact(id))}>Delete</ButtonDel>\n        <button onClick={handleEditClick}>edit </button>\n        {isEdit && (\n          <ContactEditor\n            isOpen = {isEdit}\n          contact={{ id, name, number }}\n          onClose={handleEditClose}\n        />\n      )}\n    </ContactWrap>\n    )\n}","import styled from 'styled-components'\n\nexport const ContactListWrap = styled.ul`\n  padding:10px;\n`;\nexport const ListItem = styled.li`\n  margin-bottom:8px;\n`;","import { Contact } from \"components/Contact/Contact\";\nimport { ContactListWrap, ListItem } from \"./ContactList.styled\";\nimport { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\n\nexport const ContactList =( )=>{\n  const contacts = useSelector(selectVisibleContacts);\n\n    return(\n        <ContactListWrap>\n          {contacts.map(contact => (\n            <ListItem key={contact.id}>\n                <Contact contact={contact}/>\n            </ListItem>\n          ))}\n        </ContactListWrap>\n    )\n}\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","_ref","contacts","items","selectIsLoading","state","isLoading","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","ContactWrap","styled","_templateObject","_taggedTemplateLiteral","ButtonDel","_templateObject2","PhonebookForm","Form","Label","Input","Field","_templateObject3","ErrorMsg","ErrorMessage","_templateObject4","SignupSchema","Yup","shape","test","value","required","number","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","actions","some","item","alert","concat","addContact","resetForm","handleSubmit","children","_jsxs","type","component","customStyles","overlay","position","top","left","width","height","display","justifyContent","alignItems","backgroundColor","zIndex","content","right","bottom","transform","padding","border","maxWidth","maxHeight","overflow","ContactEditor","isOpen","onClose","Modal","style","id","action","editContact","handleEditSubmit","onClick","Contact","_useState","useState","_useState2","_slicedToArray","isEdit","setIsEdit","deleteContact","ContactListWrap","ListItem","ContactList","map","Tasks","useEffect","fetchContacts","_Fragment","Helmet"],"sourceRoot":""}